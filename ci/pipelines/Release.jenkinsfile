def channel = "testing"
def version = "0.0.0"


library identifier: "cpp-jenkins-pipelines@master", retriever: modernSCM(
  [$class: "GitSCMSource",
   remote: "https://github.com/systelab/cpp-jenkins-pipelines.git",
   credentialsId: "GitHubCredentials"])

pipeline
{
	agent
	{
		label 'lib-build'
	}

	parameters
	{
		string(	name: 'version',
				description: 'Number of the version to build (must match the name of the tag that will be checked out)',
				defaultValue: '0.0.0' )

		booleanParam( name: 'stable',
					  description: 'Show if generated library should be uploaded as stable or testing',
					  defaultValue: false )
	}

	options
	{
		skipDefaultCheckout(true)
		disableConcurrentBuilds()
	}

	stages
	{
		stage('Checkout')
		{
			steps
			{
				script 
				{
					version = params.version
					channel = params.stable ? "stable" : "testing"
				}
				deleteDir()
				configureConanRemotes()
				checkoutSourceCodeFromTag(version)
			}
		}

		stage('Build')
		{	
			steps
			{
				script
				{
					def configurations = ['NewtonDebug', 'NewtonRelease']
					for(int i=0; i < configurations.size(); i++)
					{
						stage('Build ' + configurations[i])
						{
							def props = readProperties file: "ci/pipelines/${configurations[i]}.properties"							
							props.each { propKey, propValue -> println "${propKey}: ${propValue}" }

							sh "conan export-pkg JSONAdapterInterface/conanfile.py JSONAdapterInterface/${version}@systelab/${channel} -s build_type=${props.conanBuildType} -s compiler.toolset=${props.conanCompilerToolset} -s arch=${props.conanArch} --force"
							sh "mkdir build-${configurations[i]}"
							dir("build-${configurations[i]}")
							{
								sh "conan install ../JSONAdapterTestUtilities -s build_type=${props.conanBuildType} -s compiler.toolset=${props.conanCompilerToolset} -s arch=${props.conanArch} -e VERSION=${version} -e CHANNEL=${channel} -o gtest=${props.conanGTestVersion}"
								sh "cmake .. -G '${props.cmakeVS}' -A ${props.cmakePlatform}"	
								sh "cmake --build . --config ${props.cmakeConfiguration}"
								sh "conan export-pkg ../JSONAdapterTestUtilities/conanfile.py JSONAdapterTestUtilities/${version}@systelab/${channel} -s build_type=${props.conanBuildType} -s compiler.toolset=${props.conanCompilerToolset} -s arch=${props.conanArch} -o gtest=${props.conanGTestVersion} --force"
								sh "conan test ../test_package/conanfile.py JSONAdapterTestUtilities/${version}@systelab/${channel} -s build_type=${props.conanBuildType} -s compiler.toolset=${props.conanCompilerToolset} -s arch=${props.conanArch} -o gtest=${props.conanGTestVersion}"
							}
						}
					}
				}
			}
		}

		stage('Deploy')
		{
			steps
			{
				script
				{
					sh "conan remove JSONAdapterInterface/${version}@systelab/${channel} -r systelab-conan-local --force"
					sh "conan upload JSONAdapterInterface/${version}@systelab/${channel} --all -r systelab-conan-local --force"
					sh "conan remove JSONAdapterTestUtilities/${version}@systelab/${channel} -r systelab-conan-local --force"
					sh "conan upload JSONAdapterTestUtilities/${version}@systelab/${channel} --all -r systelab-conan-local --force"
				}
			}
		}
	}

	post
	{
		always
		{
			script
			{
				currentBuild.description = "${version}/${channel}"
			}
		}
	}

}