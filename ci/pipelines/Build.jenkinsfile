def channel = "testing"
def version = "0.0.0"

pipeline
{
	agent
	{
		label 'lib-build'
	}

	parameters
	{
		booleanParam( name: 'uploadTestingPkg',
					  description: 'Whether or not to upload testing conan package',
					  defaultValue: false )
	}

	options
	{
		skipDefaultCheckout(true)
		disableConcurrentBuilds()
		buildDiscarder(logRotator(numToKeepStr: '5'))
	}

	stages
	{
	
		stage('Configuration Matrix')
		{	
			matrix
			{
				axes
				{
					axis
					{
						name 'CONFIGURATION'
						values 'NewtonDebug', 'NewtonRelease'
					}
				}

				stages
				{
					def props
					stage('Checkout')
					{
						steps
						{
							dir("${CONFIGURATION}")
							{
								deleteDir()
							}
							checkout(
								changelog: true,
								poll: true,
								scm: [
									$class: 'GitSCM',
									branches: scm.branches,
									extensions: scm.extensions + 
										[[
											$class: 'CloneOption',
											shallow: true,
											noTags: true,
											reference: '',
											timeout: 10
										]] +
										[[
											$class: 'RelativeTargetDirectory',
											relativeTargetDir: "${CONFIGURATION}"
										]],
									userRemoteConfigs: scm.userRemoteConfigs
								]
							)
						}
					}

					stage('Build')
					{
						steps
						{
							dir("${CONFIGURATION}")
							{
								script
								{
									props = readProperties file:"ci/pipelines/${CONFIGURATION}.properties"							
									props.each { propKey, propValue -> println "${propKey}: ${propValue}" }

									sh "conan export-pkg JSONAdapterInterface/conanfile.py JSONAdapterInterface/${version}@systelab/${channel} -s build_type=${props.conanBuildType} -s compiler.toolset=${props.conanCompilerToolset} -s arch=${props.conanArch} --force"
									sh "mkdir build"
									dir("build")
									{
										sh "conan install ../JSONAdapterTestUtilities -s build_type=${props.conanBuildType} -s compiler.toolset=${props.conanCompilerToolset} -s arch=${props.conanArch} -e VERSION=${version} -e CHANNEL=${channel} -o gtest=${props.conanGTestVersion}"
										sh "cmake .. -G '${props.cmakeVS}' -A ${props.cmakePlatform}"	
										sh "cmake --build . --config ${props.cmakeConfiguration}"
										sh "conan export-pkg ../JSONAdapterTestUtilities/conanfile.py JSONAdapterTestUtilities/${version}@systelab/${channel} -s build_type=${props.conanBuildType} -s compiler.toolset=${props.conanCompilerToolset} -s arch=${props.conanArch} -o gtest=${props.conanGTestVersion} --force"
										sh "conan test ../test_package/conanfile.py JSONAdapterTestUtilities/${version}@systelab/${channel} -s build_type=${props.conanBuildType} -s compiler.toolset=${props.conanCompilerToolset} -s arch=${props.conanArch} -o gtest=${props.conanGTestVersion}"
									}
								}
							}
						}
					}

					stage('Deploy')
					{
						when
						{
							expression { return params.uploadTestingPkg }
						}
						steps
						{
							script
							{
								dir("${CONFIGURATION}")
								{
									sh "conan upload JSONAdapterInterface/${version}@systelab/${channel} --all -r ${props.conanRemoteName} --force"
									sh "conan upload JSONAdapterTestUtilities/${version}@systelab/${channel} --all -r ${props.conanRemoteName} --force"
								}
							}
						}
					}
				}
			}
		}
	}
}