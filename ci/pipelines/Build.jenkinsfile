def channel = "testing"
def version = "0.0.0"


library identifier: "cpp-jenkins-pipelines@master", retriever: modernSCM(
  [$class: "GitSCMSource",
   remote: "https://github.com/systelab/cpp-jenkins-pipelines.git",
   credentialsId: "GitHubCredentials"])
   
pipeline
{
	agent
	{
		label 'lib-build'
	}

	parameters
	{
		booleanParam( name: 'uploadTestingPkg',
					  description: 'Whether or not to upload testing conan package',
					  defaultValue: false )
	}

	options
	{
		skipDefaultCheckout(true)
		disableConcurrentBuilds()
		buildDiscarder(logRotator(numToKeepStr: '5'))
	}

	stages
	{
		stage('Configuration')
		{
			steps
			{
				configureConanRemotes()
			}
		}

		stage('Matrix')
		{		
			script
			{
				def configurations = ['NewtonDebug', 'NewtonRelease']
				for(int i=0; i < configurations.size(); i++)
				{
					stage(configurations[i]){
						echo "Element: $i"
					}

					stage('Checkout ' + configurations[i])
					{
						steps
						{
							dir(configurations[i])
							{
								deleteDir()
								checkoutSourceCode()
							}
						}
					}

					stage('Build ' + configurations[i])
					{
						steps
						{
							dir(configurations[i])
							{
								script
								{
									def props = readProperties file:"ci/pipelines/${configurations[i]}.properties"							
									props.each { propKey, propValue -> println "${propKey}: ${propValue}" }

									sh "conan export-pkg JSONAdapterInterface/conanfile.py JSONAdapterInterface/${version}@systelab/${channel} -s build_type=${props.conanBuildType} -s compiler.toolset=${props.conanCompilerToolset} -s arch=${props.conanArch} --force"
									sh "mkdir build"
									dir("build")
									{
										sh "conan install ../JSONAdapterTestUtilities -s build_type=${props.conanBuildType} -s compiler.toolset=${props.conanCompilerToolset} -s arch=${props.conanArch} -e VERSION=${version} -e CHANNEL=${channel} -o gtest=${props.conanGTestVersion}"
										sh "cmake .. -G '${props.cmakeVS}' -A ${props.cmakePlatform}"	
										sh "cmake --build . --config ${props.cmakeConfiguration}"
										sh "conan export-pkg ../JSONAdapterTestUtilities/conanfile.py JSONAdapterTestUtilities/${version}@systelab/${channel} -s build_type=${props.conanBuildType} -s compiler.toolset=${props.conanCompilerToolset} -s arch=${props.conanArch} -o gtest=${props.conanGTestVersion} --force"
										sh "conan test ../test_package/conanfile.py JSONAdapterTestUtilities/${version}@systelab/${channel} -s build_type=${props.conanBuildType} -s compiler.toolset=${props.conanCompilerToolset} -s arch=${props.conanArch} -o gtest=${props.conanGTestVersion}"
									}
								}
							}
						}
					}
				}
			}
		}

		stage('Deploy')
		{
			when
			{
				expression { return params.uploadTestingPkg }
			}
			steps
			{
				script
				{
					sh "conan upload JSONAdapterInterface/${version}@systelab/${channel} --all -r systelab-conan-local --force"
					sh "conan upload JSONAdapterTestUtilities/${version}@systelab/${channel} --all -r systelab-conan-local --force"
				}
			}
		}
	}
}