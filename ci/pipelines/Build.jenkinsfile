def channel = "testing"
def version = "0.0.0"

pipeline
{
	agent
	{
		label 'lib-build'
	}

	parameters
	{
		booleanParam( name: 'uploadTestingPkg',
					  description: 'Whether or not to upload testing conan package',
					  defaultValue: false )
	}

	options
	{
		skipDefaultCheckout(true)
		disableConcurrentBuilds()
		buildDiscarder(logRotator(numToKeepStr: '5'))
	}

	stages
	{
		stage('Matrix')
		{
			matrix
			{
				axes
				{
					axis
					{
						name 'BUILD_CONFIGURATION'
						values 'NewtonDebug', 'NewtonRelease'
					}
				}

				stages
				{
					stage('Checkout')
					{
						steps
						{
							deleteDir()
							checkout(
								changelog: true,
								poll: true,
								scm: [
									$class: 'GitSCM',
									branches: scm.branches,
									extensions: scm.extensions + 
										[[
											$class: 'CloneOption',
											shallow: true,
											noTags: true,
											reference: '',
											timeout: 10
										]] +
										[[
											$class: 'RelativeTargetDirectory',
											relativeTargetDir: "${BUILD_CONFIGURATION}"
										]],
									userRemoteConfigs: scm.userRemoteConfigs
								]
							)
						}
					}

					stage('Read properties')
					{
						steps
						{
							script
							{
								println 'Reading configuration properties'
								props = readProperties file:"${BUILD_CONFIGURATION}/ci/pipelines/${BUILD_CONFIGURATION}.properties"
								props.each { propKey, propValue -> println "${propKey}: ${propValue}" }
							}
						}
					}

					stage('Build')
					{
						steps
						{
							dir("${BUILD_CONFIGURATION}")
							{
								script
								{
									sh "conan export-pkg JSONAdapterInterface/conanfile.py JSONAdapterInterface/${version}@systelab/${channel} -s build_type=${props.conanBuildType} -s compiler.toolset=${props.conanCompilerToolset} -s arch=${props.conanArch} --force"
									sh "md build"
									sh "cd build"
									sh "conan install ../JSONAdapterTestUtilities -s build_type=${props.conanBuildType} -s compiler.toolset=${props.conanCompilerToolset} -s arch=${props.conanArch} -e VERSION=${version} -e CHANNEL=${channel} -o gtest=${props.conanGTestVersion}"
									sh "cmake .. -G '${props.cmakeVS}' -A ${props.cmakePlatform}"
								}
							}
						}
					}

					stage('Deploy')
					{
						when
						{
							expression { return params.uploadTestingPkg }
						}
						steps
						{
							script
							{
								echo "Pending"
							}
						}
					}
				}
			}
		}
	}
}